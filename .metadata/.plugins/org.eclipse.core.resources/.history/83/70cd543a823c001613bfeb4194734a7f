
#include "hmi.h"

/* system includes */
#include "fsl_clock_manager.h"
#include "fsl_device_registers.h"
#include "fsl_port_hal.h"
#include "fsl_smc_hal.h"
#include "fsl_debug_console.h"

/* Project includes */
#include "hal/controller/controller.h"



/* The UART to use for debug messages */
#define HMI_UART_INSTANCE   		0
#define HMI_UART_BASE				UART0
#define HMI_UART_BAUD       		115200

extern double dReferenceVelocity, dReferenceDirection;
extern t_PID_Data pidData;


void hmi_init()
{
    /* LPSCI0 */
    /* UART0_RX */
    PORT_HAL_SetMuxMode(PORTA, 1u, kPortMuxAlt2);
    /* UART0_TX */
    PORT_HAL_SetMuxMode(PORTA, 2u, kPortMuxAlt2);


    /* Select different clock source for LPSCI */
    CLOCK_SYS_SetLpsciSrc(HMI_UART_INSTANCE, kClockLpsciSrcPllFllSel);

    /* init the debug console */
    DbgConsole_Init(HMI_UART_INSTANCE, HMI_UART_BAUD, kDebugConsoleLPSCI);

}


void hmi_receive()
{
	/* Check if there are characters on buffer */
	if(UART0_BRD_S1_RDRF(UART0) == 0) return;
	char uiReceiveCommand;
	int iReceiveNumber;
	SCANF("%c%f\r\n", &uiReceiveCommand, &iReceiveNumber);
	PRINTF("Received: %c%f\r\n", uiReceiveCommand, (double)iReceiveNumber);
	switch(uiReceiveCommand)
	{
		case 'P':
		case 'p':
			controller_setKp(&pidData, dReceiveNumber);
			break;
		case 'I':
		case 'i':
			controller_setKi(&pidData, dReceiveNumber);
			break;
		case 'D':
		case 'd':
			controller_setKd(&pidData, dReceiveNumber);
			break;
		case 'V':
		case 'v':
			dReferenceVelocity = dReceiveNumber;
			break;
		case 'R':
		case 'r':
			if (dReceiveNumber != 1 || dReceiveNumber != -1)
				return;
			dReferenceDirection = dReceiveNumber;
			break;
		default:
			break;
	}
}

void hmi_transmit(double dVelocity, double dPosition, double dActuator)
{
	//PRINTF("%f %f %f\r\n", dVelocity, dPosition, dActuator);
}
