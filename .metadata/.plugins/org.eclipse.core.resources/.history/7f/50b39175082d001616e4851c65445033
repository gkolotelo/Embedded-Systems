
/* system includes */
#include "fsl_debug_console.h"
#include "fsl_device_registers.h"

#include "fsl_clock_manager.h"
#include "fsl_port_hal.h"
#include "fsl_gpio_hal.h"

/* defines */
#define CYCLIC_EXECUTIVE_PERIOD         100 * 10000 /* 1000000 micro seconds */

/* globals */
volatile unsigned int uiFlagNextPeriod = 0;         /* cyclic executive flag */

void main_cyclicExecuteIsr(void)
{
    /* set the cyclic executive flag */
    uiFlagNextPeriod = 1;
}

int boardInit()
{
    mcg_clockInit();
}

int peripheralInit()
{

	tc_installLptmr0(CYCLIC_EXECUTIVE_PERIOD, main_cyclicExecuteIsr);
}

int main(void)
{
    boardInit();
    peripheralInit();
    //encoder_initEncoder();

    // Locals
    	//CLOCK_SYS_EnablePortClock(1);
    	//CLOCK_SYS_EnablePortClock(3);
    	SIM_BASE_PTR->SCGC5 |= SIM_SCGC5_PORTB_MASK;
    	SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK;
    	//PORTB_BASE_PTR->PCR[18] = PORT_PCR_MUX(1);
    	//PORTB_BASE_PTR->PCR[19] = PORT_PCR_MUX(1);
    	//PORTB_PCR(1) = PORT_PCR_MUX(1);
    	//PORT_HAL_SetMuxMode(PORTB, 18, 1);
    	//PORT_HAL_SetMuxMode(PORTB, 19, 1);
    	//PORT_HAL_SetMuxMode(PORTD, 1, 1);
    	//GPIOB_PDDR = 0b1 << 19;
    	//GPIOB_PDDR = 0b1 << 18;
    	//GPIOD_PDDR = 0b10;
    	//GPIO_HAL_SetPinOutput(GPIOB, 18);
    	//GPIO_HAL_SetPinOutput(GPIOB, 19);
    	//GPIO_HAL_SetPinOutput(GPIOD, 1);

    for (;;) {
    	//PTB_BASE_PTR->PTOR = 0b11 << 19;


    	GPIOB_PTOR |= 0b1 << 19;
    	GPIOB_PTOR |= 0b1 << 18;
    	GPIOD_PTOR |= 0b10;

    	// Wait for next period
    	while(!uiFlagNextPeriod);
    	uiFlagNextPeriod = 0;

    }

    return 0;
}
////////////////////////////////////////////////////////////////////////////////
// EOF
////////////////////////////////////////////////////////////////////////////////
