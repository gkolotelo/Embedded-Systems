/**
 *
 * File name:        	encoder.h                          
 * File description: 	File containing the definition of methods for the
 * 						reading of an incremental, 3-pin, encoder.
 * 						
 *
 * Authors:          	Bruno de Souza Ferreira
 * 						Guilherme Kairalla Kolotelo
 * 						Guilherme Bersi Pereira
 *
 * Creation date:    	10Jun2016                                       
 * Revision date:    	20Jun2016                                       
 *
 */


#ifndef SOURCES_ENCODER_H_
#define SOURCES_ENCODER_H_

/* 2*Pi */
#define ENCODER_CONST_2PI			2 * 3.14159

/**
 * Method name:			ENCODER_CHA_IRQ_HANDLER
 * Method description:	Channel A IRQ handler
 * Input params:      	n/a
 * Output params:     	n/a
 */
extern void ENCODER_CHA_IRQ_HANDLER();


/**
 * Method name:			ENCODER_CHO_IRQ_HANDLER
 * Method description:	Channel O IRQ handler
 * Input params:      	n/a
 * Output params:     	n/a
 */
extern void ENCODER_CHO_IRQ_HANDLER();

/**
 * Method name:			encoder_initEncoder
 * Method description:	Initializes the encoder for an incremental 3-pin encoder
 * Input params:      	n/a
 * Output params:     	n/a
 */
void encoder_initEncoder();

/**
 * Method name:			encoder_enableCounter
 * Method description:	Enables the counter
 * Input params:      	n/a
 * Output params:     	n/a
 */
void encoder_enableCounter();

/**
 * Method name:			encoder_disableCounter
 * Method description:	Disables the counter
 * Input params:      	n/a
 * Output params:     	n/a
 */
void encoder_disableCounter();

/**
 * Method name:			encoder_resetCounter
 * Method description:	Resets the counter
 * Input params:      	n/a
 * Output params:     	n/a
 */
void encoder_resetCounter();

/**
 * Method name:			encoder_enableChAInterrupt
 * Method description:	Enables the interrupt on Channel A
 * Input params:      	n/a
 * Output params:     	n/a
 */
void encoder_enableChAInterrupt();

/**
 * Method name:			encoder_disableChAInterrupt
 * Method description:	Disables the interrupt on channel A
 * Input params:      	n/a
 * Output params:     	n/a
 */
void encoder_disableChAInterrupt();

/**
 * Method name:			encoder_enableChOInterrupt
 * Method description:	Enables the interrupt on Channel O
 * Input params:      	n/a
 * Output params:     	n/a
 */
void encoder_enableChOInterrupt();

/**
 * Method name:			encoder_disableChOInterrupt
 * Method description:	Disables the interrupt on channel O
 * Input params:      	n/a
 * Output params:     	n/a
 */
void encoder_disableChOInterrupt();


/* Data retrieval methods */


/**
 * Method name:			encoder_getAngularPositionDegree
 * Method description:	Returns the angular position of the encoder in degrees
 * Input params:      	n/a
 * Output params:     	double = Angular position of the encoder in degrees
 */
double encoder_getAngularPositionDegree();

/**
 * Method name:			encoder_getAngularPositionRad
 * Method description:	Returns the angular position of the encoder in radians
 * Input params:      	n/a
 * Output params:     	double = Angular position of the encoder in radians
 */
double encoder_getAngularPositionRad();

/**
 * Method name:			encoder_getAngularVelocityRadPerSec
 * Method description:	Returns the angular velocity of the encoder in Rad/s
 * Input params:      	n/a
 * Output params:     	double = Angular velocity of the encoder in Rad/s
 */
double encoder_getAngularVelocityRadPerSec();

/**
 * Method name:			encoder_getAngularVelocityRPM
 * Method description:	Returns the angular velocity of the encoder in RPM
 * Input params:      	n/a
 * Output params:     	double = Angular velocity of the encoder in RPM
 */
double encoder_getAngularVelocityRPM();

/**
 * Method name:			encoder_getDirection
 * Method description:	Returns the direction the encoder is spinning
 * Input params:      	n/a
 * Output params:     	int = Direction (0 or 1)
 */
int encoder_getDirection();

#endif /* SOURCES_ENCODER_H_ */
