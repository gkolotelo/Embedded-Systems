/**
 *
 * File name:        	controller.c
 * File description: 	File containing the methods implementing
 * 						a PID controller.
 *
 * Authors:          	Bruno de Souza Ferreira
 * 						Guilherme Kairalla Kolotelo
 * 						Guilherme Bersi Pereira
 *
 * Creation date:    	20Jun2016
 * Revision date:    	20Jun2016
 *
 */

/* System includes */
#include <stdlib.h>

#include "controller.h"

/**
 * Type name:			t_PID_Data
 * Type description: 	Holds the PID controller constants and settings, as well as past data.
 * Type paramenters:
 *  	dKp: 					Proportional constant
 *  	dKi: 					Integrative constant
 *  	dKd: 					Derivative constant
 *  	dSensorPreviousValue: 	Last calculated error
 *  	dErrorSum:    			Accumulated errors
 *  	dMaxSumError:				Maximum error cap
 */
typedef struct
{
	double dKp;
	double dKi;
	double dKd;
	double dSensorPreviousValue;
	double dErrorSum;
	double dMaxSumError;
} t_PID_Data;


///////////////////////////////////////////////////////////////////////////////////////
/*
void main()
{
	double dSensorValue, dActuatorValue, dErrorCurrent, dReferenceValue, dKp, dKi, dKd, dMaxError;
	t_PID_Data pidData;
	controller_PidInitialize(&pidData);
	controller_setKp(&pidData, dKp);
	controller_setKi(&pidData, dKi);
	controller_setKd(&pidData, dKd);
	controller_setKd(&pidData, dMaxError);
	while(1)
	{
		dSensorValue = sensorGetValue();
		dReferenceValue = referenceGetValue();
		dActuatorValue = controller_PidUpdate (&pidData, dSensorValue, dReferenceValue);
		ActuatorSetValue(dActuatorValue);
	}
}
*/
///////////////////////////////////////////////////////////////////////////////////////

/**
 * Method name:			controller_initPID
 * Method description:	Initializes the t_PID_Data with safe values
 * Input params:      	pidData	= t_PID_Data struct
 * Output params:     	n/a
 */
void controller_initPID(t_PID_Data *pidData)
{
	pidData->dKp = 0;
	pidData->dKi = 0;
	pidData->dKd = 0;
	pidData->dSensorPreviousValue = 0;
	pidData->dErrorSum = 0;
	pidData->dMaxSumError = 0;
}

/**
 * Method name:			controller_setMaxSumError
 * Method description:	Sets the maximum integrative error
 * Input params:      	pidData	= t_PID_Data struct
 * 						dMaxError = Maximum error acceptable
 * Output params:     	n/a
 */
void controller_setMaxSumError(t_PID_Data *pidData, double dMaxSumError)
{
	pidData->dMaxSumError = dMaxSumError;
}

/**
 * Method name:			controller_setKp
 * Method description:	Sets the Kp
 * Input params:      	pidData	= t_PID_Data struct
 * 						dpGain = Proportional constant
 * Output params:     	n/a
 */
void controller_setKp(t_PID_Data *pidData, double dpGain)
{
	pidData->dKp = dpGain;
}

/**
 * Method name:			controller_setKi
 * Method description:	Sets the Ki
 * Input params:      	pidData	= t_PID_Data struct
 * 						diGain = Integrative constant
 * Output params:     	n/a
 */
void controller_setKi(t_PID_Data *pidData, double diGain)
{
	pidData->dKi = diGain;
}

/**
 * Method name:			controller_setKd
 * Method description:	Sets the Kd
 * Input params:      	pidData	= t_PID_Data struct
 * 						ddGain = Derivative constant
 * Output params:     	n/a
 */
void controller_setKd(t_PID_Data *pidData, double ddGain)
{
	pidData->dKd = ddGain;
}

/**
 * Method name:			controller_PIDUpdate
 * Method description:	Updates the running controller and retrieves the actuation value
 * Input params:      	pidData	= t_PID_Data struct
 * 						dSensorValue = Value from sensor
 * 						dReferenceValue = Reference value
 * Output params:     	double = Actuation value
 */
double controller_PIDUpdate(t_PID_Data *pidData, double dSensorValue, double dReferenceValue)
{
	double dPterm, dIterm, dDterm;
	double dError, dDiferrence, dItemp;

	dError = dReferenceValue - dSensorValue;

	/* Proportional */
	dPterm = pidData->dKp * dError;

	/*  Integrative */
	dItemp = pidData->dErrorSum + dError;
	if(abs(dItemp) < pidData->dMaxSumError)
		pidData->dErrorSum = dItemp;
	dIterm = pidData->dKi * pidData->dErrorSum;

	/*  Derivative  */
	dDiferrence = pidData->dSensorPreviousValue - dSensorValue;
	pidData->dSensorPreviousValue = dSensorValue;
	dDterm = pidData->dKd * dDiferrence;

	return (dPterm + dIterm + dDterm);
}

